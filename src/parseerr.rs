#![allow(unused_imports)]
/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
use libc;
use libc::*;
use utypes::*;
use ustring::*;
use utf8::*;
use utf16::*;
use uchar::*;
use uscript::*;
use uset::*;
use ucnv::*;
use uloc::*;
use ures::*;
use unorm2::*;
use ucal::*;
use udat::*;
use unum::*;
use utrans::*;
use ubidi::*;
use ushape::*;
use ucol::*;
use usearch::*;
use ubrk::*;
use uregex::*;
use usprep::*;
use uidna::*;
use uspoof::*;
use utmscale::*;
use umachine::*;
use utext::*;
use uversion::*;
use uiter::*;
use uenum::*;
use urep::*;
use udisplaycontext::*;
use uformattable::*;
use umisc::*;
use ufieldpositer::*;
use ucnv_err::*;

#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_parseerr1 { U_PARSE_CONTEXT_LEN = 16, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct UParseError {
    pub line: int32_t,
    pub offset: int32_t,
    pub preContext: [UChar; 16usize],
    pub postContext: [UChar; 16usize],
}
impl ::std::default::Default for UParseError {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
