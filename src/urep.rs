#![allow(unused_imports)]
/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
use libc;
use libc::*;
use utypes::*;
use ustring::*;
use utf8::*;
use utf16::*;
use uchar::*;
use uscript::*;
use uset::*;
use ucnv::*;
use uloc::*;
use ures::*;
use unorm2::*;
use ucal::*;
use udat::*;
use unum::*;
use utrans::*;
use ubidi::*;
use ushape::*;
use ucol::*;
use usearch::*;
use ubrk::*;
use uregex::*;
use usprep::*;
use uidna::*;
use uspoof::*;
use utmscale::*;
use umachine::*;
use parseerr::*;
use utext::*;
use uversion::*;
use uiter::*;
use uenum::*;
use udisplaycontext::*;
use uformattable::*;
use umisc::*;
use ufieldpositer::*;
use ucnv_err::*;
use ucasemap::*;

pub type UReplaceable = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct UReplaceableCallbacks {
    pub length: ::std::option::Option<unsafe extern "C" fn(rep:
                                                               *const UReplaceable)
                                          -> int32_t>,
    pub charAt: ::std::option::Option<unsafe extern "C" fn(rep:
                                                               *const UReplaceable,
                                                           offset: int32_t)
                                          -> UChar>,
    pub char32At: ::std::option::Option<unsafe extern "C" fn(rep:
                                                                 *const UReplaceable,
                                                             offset: int32_t)
                                            -> UChar32>,
    pub replace: ::std::option::Option<unsafe extern "C" fn(rep:
                                                                *mut UReplaceable,
                                                            start: int32_t,
                                                            limit: int32_t,
                                                            text:
                                                                *const UChar,
                                                            textLength:
                                                                int32_t)>,
    pub extract: ::std::option::Option<unsafe extern "C" fn(rep:
                                                                *mut UReplaceable,
                                                            start: int32_t,
                                                            limit: int32_t,
                                                            dst: *mut UChar)>,
    pub copy: ::std::option::Option<unsafe extern "C" fn(rep:
                                                             *mut UReplaceable,
                                                         start: int32_t,
                                                         limit: int32_t,
                                                         dest: int32_t)>,
}
impl ::std::default::Default for UReplaceableCallbacks {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
