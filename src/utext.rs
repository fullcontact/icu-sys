#![allow(unused_imports)]
/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
use libc;
use libc::*;
use utypes::*;
use ustring::*;
use utf8::*;
use utf16::*;
use uchar::*;
use uscript::*;
use uset::*;
use ucnv::*;
use uloc::*;
use ures::*;
use unorm2::*;
use ucal::*;
use udat::*;
use unum::*;
use utrans::*;
use ubidi::*;
use ushape::*;
use ucol::*;
use usearch::*;
use ubrk::*;
use uregex::*;
use usprep::*;
use uidna::*;
use uspoof::*;
use utmscale::*;
use umachine::*;
use parseerr::*;
use uversion::*;
use uiter::*;
use uenum::*;
use urep::*;
use udisplaycontext::*;
use uformattable::*;
use umisc::*;
use ufieldpositer::*;
use ucnv_err::*;

#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_utext1 {
    UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1,
    UTEXT_PROVIDER_STABLE_CHUNKS = 2,
    UTEXT_PROVIDER_WRITABLE = 3,
    UTEXT_PROVIDER_HAS_META_DATA = 4,
    UTEXT_PROVIDER_OWNS_TEXT = 5,
}
pub type UTextClone =
    ::std::option::Option<unsafe extern "C" fn(dest: *mut UText,
                                               src: *const UText, deep: UBool,
                                               status: *mut UErrorCode)
                              -> *mut UText>;
pub type UTextNativeLength =
    ::std::option::Option<unsafe extern "C" fn(ut: *mut UText) -> int64_t>;
pub type UTextAccess =
    ::std::option::Option<unsafe extern "C" fn(ut: *mut UText,
                                               nativeIndex: int64_t,
                                               forward: UBool) -> UBool>;
pub type UTextExtract =
    ::std::option::Option<unsafe extern "C" fn(ut: *mut UText,
                                               nativeStart: int64_t,
                                               nativeLimit: int64_t,
                                               dest: *mut UChar,
                                               destCapacity: int32_t,
                                               status: *mut UErrorCode)
                              -> int32_t>;
pub type UTextReplace =
    ::std::option::Option<unsafe extern "C" fn(ut: *mut UText,
                                               nativeStart: int64_t,
                                               nativeLimit: int64_t,
                                               replacementText: *const UChar,
                                               replacmentLength: int32_t,
                                               status: *mut UErrorCode)
                              -> int32_t>;
pub type UTextCopy =
    ::std::option::Option<unsafe extern "C" fn(ut: *mut UText,
                                               nativeStart: int64_t,
                                               nativeLimit: int64_t,
                                               nativeDest: int64_t,
                                               move_: UBool,
                                               status: *mut UErrorCode)>;
pub type UTextMapOffsetToNative =
    ::std::option::Option<unsafe extern "C" fn(ut: *const UText) -> int64_t>;
pub type UTextMapNativeIndexToUTF16 =
    ::std::option::Option<unsafe extern "C" fn(ut: *const UText,
                                               nativeIndex: int64_t)
                              -> int32_t>;
pub type UTextClose =
    ::std::option::Option<unsafe extern "C" fn(ut: *mut UText)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct UTextFuncs {
    pub tableSize: int32_t,
    pub reserved1: int32_t,
    pub reserved2: int32_t,
    pub reserved3: int32_t,
    pub clone: UTextClone,
    pub nativeLength: UTextNativeLength,
    pub access: UTextAccess,
    pub extract: UTextExtract,
    pub replace: UTextReplace,
    pub copy: UTextCopy,
    pub mapOffsetToNative: UTextMapOffsetToNative,
    pub mapNativeIndexToUTF16: UTextMapNativeIndexToUTF16,
    pub close: UTextClose,
    pub spare1: UTextClose,
    pub spare2: UTextClose,
    pub spare3: UTextClose,
}
impl ::std::default::Default for UTextFuncs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct UText {
    pub magic: uint32_t,
    pub flags: int32_t,
    pub providerProperties: int32_t,
    pub sizeOfStruct: int32_t,
    pub chunkNativeLimit: int64_t,
    pub extraSize: int32_t,
    pub nativeIndexingLimit: int32_t,
    pub chunkNativeStart: int64_t,
    pub chunkOffset: int32_t,
    pub chunkLength: int32_t,
    pub chunkContents: *const UChar,
    pub pFuncs: *const UTextFuncs,
    pub pExtra: *mut ::std::os::raw::c_void,
    pub context: *const ::std::os::raw::c_void,
    pub p: *const ::std::os::raw::c_void,
    pub q: *const ::std::os::raw::c_void,
    pub r: *const ::std::os::raw::c_void,
    pub privP: *mut ::std::os::raw::c_void,
    pub a: int64_t,
    pub b: int32_t,
    pub c: int32_t,
    pub privA: int64_t,
    pub privB: int32_t,
    pub privC: int32_t,
}
impl ::std::default::Default for UText {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_utext2 { UTEXT_MAGIC = 878368812, }
#[link(name = "icuuc", kind = "dylib")]
#[link(name = "icudata", kind = "dylib")]
extern "C" {
    pub fn utext_close_57(ut: *mut UText) -> *mut UText;
    pub fn utext_openUTF8_57(ut: *mut UText, s: *const ::std::os::raw::c_char,
                             length: int64_t, status: *mut UErrorCode)
     -> *mut UText;
    pub fn utext_openUChars_57(ut: *mut UText, s: *const UChar,
                               length: int64_t, status: *mut UErrorCode)
     -> *mut UText;
    pub fn utext_clone_57(dest: *mut UText, src: *const UText, deep: UBool,
                          readOnly: UBool, status: *mut UErrorCode)
     -> *mut UText;
    pub fn utext_equals_57(a: *const UText, b: *const UText) -> UBool;
    pub fn utext_nativeLength_57(ut: *mut UText) -> int64_t;
    pub fn utext_isLengthExpensive_57(ut: *const UText) -> UBool;
    pub fn utext_char32At_57(ut: *mut UText, nativeIndex: int64_t) -> UChar32;
    pub fn utext_current32_57(ut: *mut UText) -> UChar32;
    pub fn utext_next32_57(ut: *mut UText) -> UChar32;
    pub fn utext_previous32_57(ut: *mut UText) -> UChar32;
    pub fn utext_next32From_57(ut: *mut UText, nativeIndex: int64_t)
     -> UChar32;
    pub fn utext_previous32From_57(ut: *mut UText, nativeIndex: int64_t)
     -> UChar32;
    pub fn utext_getNativeIndex_57(ut: *const UText) -> int64_t;
    pub fn utext_setNativeIndex_57(ut: *mut UText, nativeIndex: int64_t);
    pub fn utext_moveIndex32_57(ut: *mut UText, delta: int32_t) -> UBool;
    pub fn utext_getPreviousNativeIndex_57(ut: *mut UText) -> int64_t;
    pub fn utext_extract_57(ut: *mut UText, nativeStart: int64_t,
                            nativeLimit: int64_t, dest: *mut UChar,
                            destCapacity: int32_t, status: *mut UErrorCode)
     -> int32_t;
    pub fn utext_isWritable_57(ut: *const UText) -> UBool;
    pub fn utext_hasMetaData_57(ut: *const UText) -> UBool;
    pub fn utext_replace_57(ut: *mut UText, nativeStart: int64_t,
                            nativeLimit: int64_t,
                            replacementText: *const UChar,
                            replacementLength: int32_t,
                            status: *mut UErrorCode) -> int32_t;
    pub fn utext_copy_57(ut: *mut UText, nativeStart: int64_t,
                         nativeLimit: int64_t, destIndex: int64_t,
                         move_: UBool, status: *mut UErrorCode);
    pub fn utext_freeze_57(ut: *mut UText);
    pub fn utext_setup_57(ut: *mut UText, extraSpace: int32_t,
                          status: *mut UErrorCode) -> *mut UText;
}
